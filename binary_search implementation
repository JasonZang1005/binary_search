#include <iostream>
#include <vector>
#include <algorithm>
#include <time.h>
using namespace std;
bool binary_search1(vector<int>&v,int low,int high,const int &target) {
	while (low < high) {
		int mid = (low + high) / 2;
		cout << low<<" "<<mid<<" "<<high<< endl;
		if (v[mid] < target) {
			low = mid + 1;
		}
		else {
			high = mid;
		}
	}
	if (low > high)return false;
	else {
		if (v[low] == target)return true;
		else return false;
	}
}
bool binary_search1_recursive(vector<int>&v, int low, int high, const int &target) {
	if (low > high)return false;
	if (low == high) {
		if (v[low] == target)return true;
		else return false;
	}
	int mid = (low + high) / 2;
	if (v[mid] < target) {
		return binary_search1_recursive(v, mid + 1, high, target);
	}
	else {
		return binary_search1_recursive(v, low, mid, target);
	}

}
bool binary_search2(vector<int>&v, int low, int high, const int&target) {
	while (low <= high) {
		int mid = (low + high) / 2;
		if (v[mid] < target) {
			low = mid + 1;
		}
		else if(v[mid]>target){
			high = mid - 1;
		}
		else {
			return true;
		}
	}
	if (low > high) {
		return false;
	}
}
bool binary_search2_recursive(vector<int>&v, int low, int high, const int&target) {
	if (low <= high) {
		int mid = (low + high) / 2;
		if (v[mid] < target) {
			return binary_search2_recursive(v, mid + 1, high, target);
		}
		else if (v[mid] > target) {
			return binary_search2_recursive(v, low, mid - 1, target);
		}
		else {
			return true;
		}
	}
	else {
		return false;
	}
}
void print(int x) {
	cout << x << " ";
}
int main() {
	int n;
	while (cin >> n) {
		srand(time(NULL));
		vector<int> v(n);
		for (auto i = 0; i < n; i++) {
			v[i] = rand() % 1000;
			
		}
		sort(v.begin(), v.end());
		for_each(v.begin(), v.end(), print);
		int x;
		cin >> x;
		if (binary_search1(v, 0, n - 1, x));
		if (binary_search1_recursive(v, 0, n - 1, x));
	}
}
